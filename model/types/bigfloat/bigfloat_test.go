package bigfloat

import (
	"log"
	"strings"
	"testing"
)

type testAdd struct {
	a      string
	b      string
	output string
}
type testRound struct {
	a         string
	decimal   uint
	roundType RoundType
	output    string
}

var testAddTable = []*testAdd{
	{"-123456789012345678901234567890.12345678901234567890123456789012345678901234567890", "1", "-123456789012345678901234567889.12345678901234567890123456789012345678901234567890"},
	{"123456789012345678901234567890.12345678901234567890123456789012345678901234567890", "1", "123456789012345678901234567891.12345678901234567890123456789012345678901234567890"},
	{"-12345678901234567890123456789012345678901234567890.123456789012345678901234567891", "1", "-12345678901234567890123456789012345678901234567889.123456789012345678901234567891"},
	{"-123456789012345678901234567890.123456789012345678901234567891", "1", "-123456789012345678901234567889.123456789012345678901234567891"},
	{"123.123", "1", "124.123"},
	{"-123.123", "1", "-122.123"},
	{"123123123.123456", "1", "123123124.123456"},
	{"-123123.123", "1", "-123122.123"},
	{"1", "1", "2"},
}
var testRoundTable = []*testRound{
	{"-123456789012345678901234567890.12345678901234567890123456789012345678901234567890", 0, RoundDown, "-123456789012345678901234567891"},
	{"-123456789012345678901234567890.12345678901234567890123456789012345678901234567890", 0, RoundUpAlways, "-123456789012345678901234567890"},
	{"-123456789012345678901234567890.12345678901234567890123456789012345678901234567890", 0, RoundUpAuto, "-123456789012345678901234567890"},
	{"123456789012345678901234567890.12345678901234567890123456789012345678901234567890", 0, RoundUpAuto, "123456789012345678901234567890"},
	{"123456789012345678901234567890.12345678901234567890123456789012345678901234567890", 0, RoundDown, "123456789012345678901234567890"},
	{"123456789012345678901234567890.12345678901234567890123456789012345678901234567890", 0, RoundUpAlways, "123456789012345678901234567891"},
	{"123456789012345678901234567890.12345678901234567890123456789012345678901234567890", 4, RoundUpAuto, "123456789012345678901234567890.1235"},
	{"123456789012345678901234567890.12345678901234567890123456789012345678901234567890", 4, RoundDown, "123456789012345678901234567890.1234"},
	{"123456789012345678901234567890.12345678901234567890123456789012345678901234567890", 4, RoundUpAlways, "123456789012345678901234567890.1235"},
	//{"-12345678901234567890123456789012345678901234567890.123456789012345678901234567891", 10, "-12345678901234567890123456789012345678901234567889.123456789012345678901234567891"},
	//{"-123456789012345678901234567890.123456789012345678901234567891", 1, "-123456789012345678901234567889.123456789012345678901234567891"},
	//{"123.123", 10 "124.123"},
	//{"-123.123", 10, "-122.123"},
	//{"123123123.123456", 5, "123123124.123456"},
	//{"-123123.123", 2, "-123122.123"},
	//{"1", 1, "2"},
}

func TestBigFloat_Add(t *testing.T) {
	for _, te := range testAddTable {
		a := BigFloat{}
		a.CreateFromString(te.a, ToNearestEven)

		b := BigFloat{}
		b.SetString(te.b)

		newData := BigFloat{}
		newData.Add(a, b)

		if strings.TrimRight(newData.String(), "0") != strings.TrimRight(te.output, "0") {
			t.Errorf("expected %s, got %s a:%v, b:%v", te.output, newData.String(), te.a, te.b)
		}
	}
}

func TestBigFloat_Round(t *testing.T) {
	for _, te := range testRoundTable {
		a := BigFloat{}
		a.CreateFromString(te.a, ToNearestEven)

		result, err := a.Round(te.decimal, te.roundType)

		if err != nil {
			log.Println(err)
			continue
		}

		if result.String() != te.output {
			t.Errorf("expected %s, got %s a:%v, decimal:%v, roundType:%v", te.output, result.String(), te.a, te.decimal, te.roundType)
		}
	}
}
